package com.springcloudtest.util;

import java.util.Set;
import java.util.concurrent.ConcurrentMap;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.concurrent.ConcurrentMapCache;
import org.springframework.cache.concurrent.ConcurrentMapCacheManager;
import org.springframework.data.redis.cache.RedisCache;
import org.springframework.data.redis.cache.RedisCacheManager;
import org.springframework.data.redis.core.RedisOperations;
import org.springframework.stereotype.Component;

@Component
public class CacheUtils {

	public final Logger logger = LoggerFactory.getLogger(this.getClass());

	@Autowired
	ConcurrentMapCacheManager concurrentMapCacheManager;
	@Autowired
	RedisCacheManager redisCacheManager;

	public void clearMap(String name) {
		concurrentMapCacheManager.getCache(name).clear();
	}

	public void clearMap(String name, String pattern) {
		ConcurrentMapCache concurrentMapCache = (ConcurrentMapCache) concurrentMapCacheManager.getCache(name);
		ConcurrentMap concurrentMap = concurrentMapCache.getNativeCache();
		Set<String> keySet = concurrentMap.keySet();
		for (String key : keySet) {
			if (key.indexOf(pattern) != -1) {
				concurrentMap.remove(key);
			}
		}
	}

	public void clearRedis(String name) {
		redisCacheManager.getCache(name).clear();
	}

	public void clearRedis(String name, String pattern) {
		RedisCache redisCache = (RedisCache) redisCacheManager.getCache("calprem");
		RedisOperations redisOperations = (RedisOperations) redisCache.getNativeCache();
		Set<String> set = redisOperations.keys(pattern);
		redisOperations.delete(set);
	}

	public void clearCache(String name) {
		clearMap(name);
		clearRedis(name);
	}

	public void clearCache(String name, String pattern) {
		clearMap(name, pattern);
		clearRedis(name, pattern);
	}

	public void handleClearMessage(String message) {
		logger.info("清除本地产品配置缓存[{}]", message);
		if (StringUtils.isNotBlank(message)) {
			if (message.equals("ALL")) {
				clearMap("netcore");
//				clearRedis("netcore");
			}else if(message.equals("policyLimitAmount")){//清除风险累积本地缓存
				clearMap("netcore", "policyLimitAmount");
			}else if(message.equals("productPayMentPlanInfo")){//清除产品分期配置信息本地缓存
				clearMap("netcore", "productPayMentPlanInfo");
			}else if(message.equals("payFailedListPurpose")){//清除 扣款失败列表 配置信息本地缓存
				clearMap("netcore", "payFailedListPurpose");
			}else {
				clearMap("netcore", "productConf-" + message);
//				clearRedis("netcore", "productConf-" + message + "*");
				clearMap("netcore","productConfString-" +message);
			}
		}
	}
}
